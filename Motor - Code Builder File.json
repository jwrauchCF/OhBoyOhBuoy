{"cpu_model":"ttgo-lora32-v1","cpu_type":"esp32","device_uuid":"74704b843f1a4bb3908e605bba057b28","plugins":{"ChipChop Engine":{"type":"chipchop","category":"core","vs":"1.4x","folder":"_ChipChop-Engine","prefix":"CC","params":{"CC_SEND_RATE":510,"CC_HEARTBEAT_INTERVAL":10000,"CC_USE_CLOCK":[1,0],"CC_DATE_FORMAT":"dd MM YY - hh:mm:ss"},"params_formats":{"CC_DATE_FORMAT":"string"},"info":"These are the basic settings for the main ChipChop library engine that you can define now so you can keep your main code clean and less cluttered.","config_info":"Config Info:<br><br>\n        Send rate: 500ms and more<br>\n        Heartbeat: 10,000ms (10 sec) and more<br><br>\n        Date Formats: <br>&nbsp;&nbsp;&nbsp;YY - year 2 digits<br>&nbsp;&nbsp;&nbsp;YYYY - year 4 digits<br>&nbsp;&nbsp;&nbsp;MM - month number<br>&nbsp;&nbsp;&nbsp;MMM - month short string<br>&nbsp;&nbsp;&nbsp;MMMM - month long string<br>&nbsp;&nbsp;&nbsp;dd - day as number<br>&nbsp;&nbsp;&nbsp;hh - hour<br>&nbsp;&nbsp;&nbsp;mm - minute<br>&nbsp;&nbsp;&nbsp;ss - second ","ram":40,"flash":0,"defines":"\n        // CHIPCHOP ENGINE\n        #define CC_SOCKET_CLOSED 1\n        #define CC_CONNECTED 2\n        #define CC_COMMAND_RECEIVED 3\n        #define CC_TOTAL_EVENTS 3\n        #define CC_TOTAL_CALLBACKS 12\n        #define CC_MAX_COMPONENTS 10\n        //settings\n        #define CC_CAN_RUN 1","config":"\n        #define CC_SEND_RATE 510\n        #define CC_HEARTBEAT_INTERVAL 10000\n        #define CC_USE_CLOCK 1\n        #define CC_DATE_FORMAT \"dd MM YY - hh:mm:ss\"","params_selected":{"CC_SEND_RATE":"510","CC_HEARTBEAT_INTERVAL":"10000","CC_USE_CLOCK":"1","CC_DATE_FORMAT":"dd MM YY - hh:mm:ss"},"saved":1},"Keep Alive":{"type":"keepalive","category":"core","vs":"1.2","folder":"ChipChop-KeepAlive","files":["cc_keepAlive.h","cc_keepAlive.cpp"],"prefix":"KEEP_ALIVE","params":{"KEEP_ALIVE_MODE":["KEEP_ALIVE_AUTO","KEEP_ALIVE_WIFI","KEEP_ALIVE_RESTART","KEEP_ALIVE_OFF"],"KEEP_ALIVE_TIMEOUT":120000},"info":"Keep Alive plugin is designed to continuously observe your device connection with the ChipChop API server.In case of extended signal loss it can attempt restarting the WiFi connection or even restart the entire ESP in the hope that you may get a more stable WiFi channel.","ram":1,"flash":0,"defines":"\n        // KEEP ALIVE\n        #define KEEP_ALIVE_EXISTS\n        #define KEEP_ALIVE_OFF 0\n        #define KEEP_ALIVE_WIFI 1\n        #define KEEP_ALIVE_RESTART 2\n        #define KEEP_ALIVE_AUTO 3\n        //events\n        #define KEEP_ALIVE_RESTARTING 1\n        #define KEEP_ALIVE_TOTAL_EVENTS 1\n        #define KEEP_ALIVE_TOTAL_CALLBACKS 10\n        //settings\n        ","config":"\n        #define KEEP_ALIVE_MODE KEEP_ALIVE_AUTO\n        #define KEEP_ALIVE_TIMEOUT 120000","includes":"\n#include <cc_keepAlive.h>\nextern CC_KeepAlive KeepAlive;","init_start":"\n        KeepAlive.init();","params_selected":{"KEEP_ALIVE_MODE":"KEEP_ALIVE_AUTO","KEEP_ALIVE_TIMEOUT":"120000"},"saved":1},"Preferences Manager":{"type":"prefs","category":"core","vs":"1.0","folder":"ChipChop-Prefs","files":["cc_Prefs.h","cc_Prefs.cpp"],"prefix":"PREFS_MANAGER","params":{"PREFS_MANAGER_AUTO_SAVE":[1,0]},"info":"Preferences Manager is a great utility that integrates automatically with most plugins and enables you to save various 'key' : 'value' pairs of data in the ESP flash and retrieve it at any time from anywhere in your code. If you also use the Keep Alive plugin, when the Pref Manager Auto Save mode is set to 1 (true) in case of a device restart by Keep Alive all component statuses will be automatically backed up and can be restored.<br><br><span class='text_main'>NOTE:</span><span class='text_tone_0'> To avoid extensive wear of the internal flash memory it is recommended that you use this plugin for storing smaller amounts of data and not for constant recording of logs or reading and writing larger files.</span><br>","ram":1,"flash":0,"defines":"\n        // PrefsManager\n        #define PREFS_MANAGER_EXISTS\n        #define PREFS_MANAGER_TOTAL_EVENTS 1\n        #define PREFS_MANAGER_TOTAL_CALLBACKS 4\n        //settings\n        ","config":"\n        #define PREFS_MANAGER_AUTO_SAVE 1","platformio_ini":"\n\nboard_build.filesystem = littlefs","includes":"\n#include <cc_Prefs.h>\nextern ChipChopPrefsManager PrefsManager;","init_start":"\n        PrefsManager.init();","params_selected":{"PREFS_MANAGER_AUTO_SAVE":"1"},"saved":1},"OTA (Over the air updates)":{"type":"ota","category":"core","vs":"1.1","files":["chipchop_ota.h","chipchop_ota.cpp"],"folder":"ChipChop-OTA","prefix":"OTA","params":{"OTA_FIRMWARE_VS":"1.0"},"params_formats":{"OTA_FIRMWARE_VS":"string"},"info":"ChipChop OTA provides you with a simple way of updating your device over the air. Simply compile the binary for your project using the PlatformIO 'Build' option and upload the final binary on some free hosting server. Then, directly from the Dev Console or ChipChop App send an OTA command with the link to the binary and let the plugin handle the download, install and restart of your ESP. Change the 'Firmware Vs' parameter before every build so you can track which version of the binary is uploaded to the device.<br><br><span class='text_main'>NOTE:</span><span class='text_tone_0'> This feature is not yet fully integrated into the Dev Console, post in the forum for instructions how to use it at the moment.</span>","ram":2,"flash":0,"defines":"\n        // OTA\n        #define OTA_EXISTS\n        //settings\n        ","config":"\n        #define OTA_FIRMWARE_VS \"1.0\"","includes":"\n#include <chipchop_ota.h>\nextern ChipChop_ota ChipChop_OTA;","init_start":"\n        ChipChop_OTA.init();","params_selected":{"OTA_FIRMWARE_VS":"1.0"},"saved":1},"WiFi Portal":{"type":"wifiportal","category":"core","vs":"1.6","requires":["prefs"],"folder":"ChipChop-WiFiPortal","files":["ChipChopWifiPortal.h","ChipChopWifiPortal.cpp","portal_html.h"],"prefix":"WIFI_PORTAL","params":{"WIFI_PORTAL_AP_PASS":"","WIFI_PORTAL_START_CHIPCHOP_ON_CONNECT":1,"WIFI_PORTAL_CONNECT_TO":["ANY_KEEP_PREFERRED","LAST_CONNECTED","ANY"],"WIFI_PORTAL_RECONNECT_INTERVAL":30000,"WIFI_PORTAL_TIMEOUT":180000,"WIFI_PORTAL_AUTO_RESTART":[1,0],"WIFI_PORTAL_AUTO_RECONNECT":[1,0]},"params_formats":{"WIFI_PORTAL_AP_SSID":"string","WIFI_PORTAL_AP_PASS":"string","WIFI_PORTAL_CONNECT_TO":"string"},"info":"The WiFi Portal provides a convenient way of setting up the wifi on your device without hard coding the wifi credentials. Every time the device starts it creates a temporary wifi hotspot, connecting to the hotspot automatically starts the captive portal on your phone with the list of all networks found. Simply select your WiFi, enter the password and the device will remember it for the next time. The portal will remember all networks that you have logged in before so it's also suitable for portable devices that need to be able to connect automatically in various locations.<br><br><span class='text_main'>NOTE:</span><span class='text_tone_0'> From iOS 17.3 the captive portal will not start automatically on an iPhone, once connected to the hotspot open Safari and go to <span class='homeText3b homeTitle'>192.168.0.1</span> to launch the portal manually.</span>","ram":10,"flash":0,"defines":"\n        // WIFI PORTAL\n        #define WIFI_PORTAL_EXISTS\n        #define WIFI_PORTAL_STARTING 1\n        #define WIFI_PORTAL_CONNECTING 2\n        #define WIFI_PORTAL_LOADING_CREDENTIALS 3\n        #define WIFI_PORTAL_SAVING_CREDENTIALS 4\n        #define WIFI_PORTAL_RECONNECTING 5\n        #define WIFI_PORTAL_CLOSING 6\n        #define WIFI_PORTAL_RESTARTING 7\n        #define WIFI_PORTAL_CONNECTED 7\n        #define WIFI_PORTAL_DISCONNECTED 8\n        #define WIFI_PORTAL_ERROR 9\n        //events\n        #define WIFI_PORTAL_STATUS 1\n        #define WIFI_PORTAL_TOTAL_EVENTS 1\n        #define WIFI_PORTAL_TOTAL_CALLBACKS 4\n        //settings\n        ","config":"\n        #define WIFI_PORTAL_AP_SSID \"Motor\"\n        #define WIFI_PORTAL_AP_PASS \"\"\n        #define WIFI_PORTAL_START_CHIPCHOP_ON_CONNECT 1\n        #define WIFI_PORTAL_CONNECT_TO \"ANY_KEEP_PREFERRED\"\n        #define WIFI_PORTAL_RECONNECT_INTERVAL 30000\n        #define WIFI_PORTAL_TIMEOUT 180000\n        #define WIFI_PORTAL_AUTO_RESTART 1\n        #define WIFI_PORTAL_AUTO_RECONNECT 1","includes":"\n#include <ChipChopWifiPortal.h>\nextern ChipChopWifiPortal WifiPortal;","init_start":"\n        WifiPortal.init();","params_selected":{"WIFI_PORTAL_AP_SSID":"Motor","WIFI_PORTAL_AP_PASS":"","WIFI_PORTAL_START_CHIPCHOP_ON_CONNECT":"1","WIFI_PORTAL_CONNECT_TO":"ANY_KEEP_PREFERRED","WIFI_PORTAL_RECONNECT_INTERVAL":"30000","WIFI_PORTAL_TIMEOUT":"180000","WIFI_PORTAL_AUTO_RESTART":"1","WIFI_PORTAL_AUTO_RECONNECT":"1"},"saved":1}}}